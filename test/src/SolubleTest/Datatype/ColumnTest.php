<?php

namespace SolubleTest\Datatype;

use Soluble\Datatype\Column;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-04 at 13:55:32.
 */
class ColumnTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Column
     */
    protected $column;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    public function testCreateColumnDefinitionThrowsUnsupportedDatatypeException() {
        $this->setExpectedException('Soluble\Datatype\Exception\UnsupportedTypeException');
        $coldef = Column::createColumnDefinition('NOTAVALIDTYPE', 'cool');
    }

    public function testCreateColumnDefinition() {
        $coldef = Column::createColumnDefinition(Column::TYPE_BOOLEAN, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\BooleanColumn', $coldef);
        $coldef->setNumericUnsigned(true);
        $this->assertFalse($coldef->getNumericUnsigned());
        $this->assertFalse($coldef->isNumericUnsigned());
        $coldef->setNumericUnsigned(false);
        $this->assertFalse($coldef->getNumericUnsigned());

        $coldef = Column::createColumnDefinition(Column::TYPE_BIT, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\BitColumn', $coldef);


        $coldef = Column::createColumnDefinition(Column::TYPE_BLOB, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\BlobColumn', $coldef);
        $coldef->setCharacterOctetLength(10);
        $this->assertEquals(10, $coldef->getCharacterOctetLength());

        $coldef = Column::createColumnDefinition(Column::TYPE_DECIMAL, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\DecimalColumn', $coldef);
        $coldef->setNumericUnsigned(true);
        $this->assertTrue($coldef->getNumericUnsigned());
        $this->assertTrue($coldef->isNumericUnsigned());
        $coldef->setNumericUnsigned(false);
        $this->assertFalse($coldef->getNumericUnsigned());

        $coldef->setNumericPrecision(5);
        $this->assertEquals(5, $coldef->getNumericPrecision());

        $coldef->setNumericScale(3);
        $this->assertEquals(3, $coldef->getNumericScale());

        $coldef = Column::createColumnDefinition(Column::TYPE_INTEGER, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\IntegerColumn', $coldef);
        $coldef->setNumericUnsigned(true);
        $this->assertTrue($coldef->getNumericUnsigned());
        $this->assertTrue($coldef->isNumericUnsigned());
        $coldef->setNumericUnsigned(false);
        $this->assertFalse($coldef->getNumericUnsigned());
        $coldef->setIsAutoIncrement(true);
        $this->assertTrue($coldef->isAutoIncrement());


        $coldef = Column::createColumnDefinition(Column::TYPE_STRING, 'flag_test');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $coldef);
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\StringColumn', $coldef);
        $coldef->setCharacterMaximumLength(2000);
        $this->assertEquals(2000, $coldef->getCharacterMaximumLength());
    }

    public function testAbstractColumnDefinition() {

        $def = Column::createColumnDefinition(Column::TYPE_STRING, 'column_name', 'table_name');
        $this->assertInstanceOf('Soluble\Datatype\Column\Definition\AbstractColumnDefinition', $def);
        $this->assertEquals('column_name', $def->getName());
        $this->assertEquals('table_name', $def->getTableName());
        $def->setName('new_name');
        $def->setTableName('new_table_name');
        $this->assertEquals('new_name', $def->getName());
        $this->assertEquals('new_table_name', $def->getTableName());

        $def->setSchemaName('schema_name');
        $this->assertEquals('schema_name', $def->getSchemaName());

        $def->setOrdinalPosition(10);
        $this->assertEquals(10, $def->getOrdinalPosition());

        $this->assertFalse($def->isGroup());
        $def->setIsGroup(true);
        $this->assertTrue($def->isGroup());

        $this->assertFalse($def->isPrimary());
        $def->setIsPrimary(true);
        $this->assertTrue($def->isPrimary());

        $this->assertFalse($def->isNullable());
        $def->setIsNullable(true);
        $this->assertTrue($def->isNullable());


        $def->setColumnDefault('def');
        $this->assertEquals('def', $def->getColumnDefault());

        $array = $def->toArray();
        $this->assertInternalType('array', $array);
    }

    public function testGetSupportedTypes() {
        $types = Column::getSupportedTypes();
        $this->assertInternalType('array', $types);
    }

}
